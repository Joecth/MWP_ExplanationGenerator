<Unit ID="IIS-MR-MATH-GRADEXX-XXXXXX">
<Traces>
<Trace>
  <CHUNK_TREE>
      <CHUNK>BeginTree</CHUNK>
        <CHUNK>24game</CHUNK>
          <CHUNK>OP_Addition</CHUNK>
            <CHUNK>17game</CHUNK>
              <CHUNK>OP_Addition</CHUNK>
                <CHUNK>9game</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
                <CHUNK>8game</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>7game</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          <CHUNK>UPSCOPE</CHUNK>
        <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>EndTree</CHUNK>
  </CHUNK_TREE>
  <math ID='ctx_240'>
    24game
    Addition
    <math ID='ctx_233'>
      17game
      Addition
      <math ID='NULL'>
        9game
      </math>
      <math ID='NULL'>
        8game
      </math>
    </math>
    <math ID='NULL'>
      7game
    </math>
  </math>
  <ctx ID='ctx_242'>
    <__one_line_xml_ASK__ANS>24</__one_line_xml_ASK__ANS>
    <ctx ID='ctx_241'>
      ( CLUE::Input ( ASK ANS ( tvq v1 # s4w3 t2 ) ) )
    </ctx>
    <ctx ID='ctx_244'>
      ( CLUE::AtomSeq ( tvq v1 # s1w6 t2 ) )
      ( CLUE::Util ( Get ( m_real 24 ) ) )
      ( CLUE::Util ( Val ( m_real 24 ) ( m_fact ( tvq v1 # s1w6 t2 ) ( 24 ) ) ) )
      <ctx ID='ctx_240'>
        ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t2 ) ( + ( tvq v1 # s1w6 t1 ) ( quan q6 # s1w6 ) ) ) )
        ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t2 ) ( + 17 7 ) ) )
        ( CLUE::Create-Fact ( tvq v1 # s1w6 t2 ) ( 24 ) )
        <ctx ID='ctx_239'>
          ( CLUE::Rule ( => ( and ( quan ?_1 ?_2 ?_3 ) ( tvq_op ?_4 + ?_1 ?_5 ?_6 ) ) ( = ( tvq ?_4 ?_2 ?_3 ?_6 ) ( + ( tvq ?_4 ?_2 ?_3 ?_5 ) ( quan ?_1 ?_2 ?_3 ) ) ) ) )
          ( CLUE::Bind ( ?_1 q6 ) ( ?_2 # ) ( ?_3 s1w6 ) ( ?_4 v1 ) ( ?_5 t1 ) ( ?_6 t2 ) )
          ( CLUE::Premise ( quan q6 # s1w6 ) ( tvq_op v1 + q6 t1 t2 ) )
          ( CLUE::Conclusion ( = ( tvq v1 # s1w6 t2 ) ( + ( tvq v1 # s1w6 t1 ) ( quan q6 # s1w6 ) ) ) )
          ( CLUE::ExprVarMap ( $1_tvq ) ( $2_tvq 17 ) ( $3_quan 7 ) )
          <ctx ID='ctx_154'>
            ( CLUE::EVAL::LF2 ( = ( quan q6 # s1w6 ) 7 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q6 # s1w6 ) 7 ) )
            ( CLUE::Create-Fact ( quan q6 # s1w6 ) ( 7 ) )
            <ctx ID='ctx_153'>
              ( CLUE::Input ( = ( quan q6 # s2w14 ) 7 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_238'>
            ( CLUE::Create-Fact ( tvq_op v1 + q6 t1 t2 ) ( ) )
            <ctx ID='ctx_236'>
              ( CLUE::Input ( tvq_op v1 + q6 t1 t2 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_233'>
          ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t1 ) ( + ( tvq v1 # s1w6 t0 ) ( quan q4 # s1w6 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t1 ) ( + 9 8 ) ) )
          ( CLUE::Create-Fact ( tvq v1 # s1w6 t1 ) ( 17 ) )
          <ctx ID='ctx_232'>
            ( CLUE::Rule ( => ( and ( quan ?_1 ?_2 ?_3 ) ( tvq_op ?_4 + ?_1 ?_5 ?_6 ) ) ( = ( tvq ?_4 ?_2 ?_3 ?_6 ) ( + ( tvq ?_4 ?_2 ?_3 ?_5 ) ( quan ?_1 ?_2 ?_3 ) ) ) ) )
            ( CLUE::Bind ( ?_1 q4 ) ( ?_2 # ) ( ?_3 s1w6 ) ( ?_4 v1 ) ( ?_5 t0 ) ( ?_6 t1 ) )
            ( CLUE::Premise ( quan q4 # s1w6 ) ( tvq_op v1 + q4 t0 t1 ) )
            ( CLUE::Conclusion ( = ( tvq v1 # s1w6 t1 ) ( + ( tvq v1 # s1w6 t0 ) ( quan q4 # s1w6 ) ) ) )
            ( CLUE::ExprVarMap ( $1_tvq ) ( $2_tvq 9 ) ( $3_quan 8 ) )
            <ctx ID='ctx_146'>
              ( CLUE::EVAL::LF2 ( = ( quan q4 # s1w6 ) 8 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q4 # s1w6 ) 8 ) )
              ( CLUE::Create-Fact ( quan q4 # s1w6 ) ( 8 ) )
              <ctx ID='ctx_145'>
                ( CLUE::Input ( = ( quan q4 # s2w5 ) 8 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_231'>
              ( CLUE::Create-Fact ( tvq_op v1 + q4 t0 t1 ) ( ) )
              <ctx ID='ctx_229'>
                ( CLUE::Input ( tvq_op v1 + q4 t0 t1 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_226'>
            ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t0 ) ( quan q2 # s1w6 ) ) )
            ( CLUE::EVAL::LF2 ( = ( tvq v1 # s1w6 t0 ) 9 ) )
            ( CLUE::Create-Fact ( tvq v1 # s1w6 t0 ) ( 9 ) )
            <ctx ID='ctx_225'>
              ( CLUE::Input ( = ( tvq v1 # s1w6 t0 ) ( quan q2 # s1w6 ) ) )
            </ctx>
            <ctx ID='ctx_79'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 9 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 9 ) )
              ( CLUE::Create-Fact ( quan q2 # s1w6 ) ( 9 ) )
              <ctx ID='ctx_78'>
                ( CLUE::Input ( = ( quan q2 # s1w6 ) 9 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_146'>
            ( CLUE::EVAL::LF2 ( = ( quan q4 # s1w6 ) 8 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q4 # s1w6 ) 8 ) )
            ( CLUE::Create-Fact ( quan q4 # s1w6 ) ( 8 ) )
            <ctx ID='ctx_145'>
              ( CLUE::Input ( = ( quan q4 # s2w5 ) 8 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_154'>
          ( CLUE::EVAL::LF2 ( = ( quan q6 # s1w6 ) 7 ) )
          ( CLUE::EVAL::LF2 ( = ( quan q6 # s1w6 ) 7 ) )
          ( CLUE::Create-Fact ( quan q6 # s1w6 ) ( 7 ) )
          <ctx ID='ctx_153'>
            ( CLUE::Input ( = ( quan q6 # s2w14 ) 7 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
</Traces>
</Unit>
