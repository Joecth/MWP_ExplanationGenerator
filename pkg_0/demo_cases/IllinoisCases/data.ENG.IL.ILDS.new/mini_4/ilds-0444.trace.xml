<Unit ID="IIS-MR-MATH-GRADEXX-XXXXXX">
<Traces>
<Trace>
  <CHUNK_TREE>
      <CHUNK>V.have</CHUNK>
      <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>BeginTree</CHUNK>
        <CHUNK>20</CHUNK>
          <CHUNK>OP_Multiplication</CHUNK>
            <CHUNK>5pizza</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>4(slice/pizza)</CHUNK>
              <CHUNK>OP_CommonDiv</CHUNK>
                <CHUNK>4slice</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
                <CHUNK>1pizza</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          <CHUNK>UPSCOPE</CHUNK>
        <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>EndTree</CHUNK>
  </CHUNK_TREE>
  <math ID='ctx_167'>
    20
    Multiplication
    <math ID='NULL'>
      5pizza
    </math>
    <math ID='ctx_136'>
      4(slice/pizza)
      CommonDiv
      <math ID='NULL'>
        4slice
      </math>
      <math ID='NULL'>
        1pizza
      </math>
    </math>
  </math>
  <ctx ID='ctx_164'>
    <__one_line_xml_ASK__ANS>20</__one_line_xml_ASK__ANS>
    <ctx ID='ctx_163'>
      ( CLUE::Input ( ASK ANS ( Multiplication ( quan q1 # s2w4 ) ( Get ( u_map ?m # s2w4 # s3w5 ) ( COND ( verb ?m s3w3 ) ) ) ) ) )
    </ctx>
    <ctx ID='ctx_167'>
      ( CLUE::Util ( Multiplication 5 4 = 20 ) )
      ( CLUE::Util ( Val1 ( m_real 5 ) ( m_fact ( quan q1 # s1w6 ) ( 5 ) ) ) )
      ( CLUE::Util ( Val2 ( m_real 4 ) ( m_fact ( u_map m1 # s1w6 # s3w5 ) ( 4 ) ) ) )
      <ctx ID='ctx_88'>
        ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w6 ) 5 ) )
        ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w6 ) 5 ) )
        ( CLUE::Create-Fact ( quan q1 # s1w6 ) ( 5 ) )
        <ctx ID='ctx_87'>
          ( CLUE::Input ( = ( quan q1 # s2w4 ) 5 ) )
        </ctx>
      </ctx>
      <ctx ID='ctx_166'>
        ( CLUE::Bound-Facts ( u_map m1 # s1w6 # s3w5 ) ( verb m1 s1w4 ) )
        <ctx ID='ctx_136'>
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w6 # s3w5 ) ( / ( quan q3 # s3w5 ) ( quan q2 # s1w6 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w6 # s3w5 ) ( / 4 1 ) ) )
          ( CLUE::Create-Fact ( u_map m1 # s1w6 # s3w5 ) ( 4 ) )
          <ctx ID='ctx_135'>
            ( CLUE::Rule ( => ( and ( q_map ?_1 ?_2 ?_3 ) ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ( = ( u_map ?_1 ?_4 ?_5 ?_6 ?_7 ) ( / ( quan ?_3 ?_6 ?_7 ) ( quan ?_2 ?_4 ?_5 ) ) ) ) )
            ( CLUE::Bind ( ?_1 m1 ) ( ?_2 q2 ) ( ?_3 q3 ) ( ?_4 # ) ( ?_5 s1w6 ) ( ?_6 # ) ( ?_7 s3w5 ) )
            ( CLUE::Premise ( q_map m1 q2 q3 ) ( quan q2 # s1w6 ) ( quan q3 # s3w5 ) )
            ( CLUE::Conclusion ( = ( u_map m1 # s1w6 # s3w5 ) ( / ( quan q3 # s3w5 ) ( quan q2 # s1w6 ) ) ) )
            ( CLUE::ExprVarMap ( $1_u_map ) ( $2_quan 4 ) ( $3_quan 1 ) )
            <ctx ID='ctx_134'>
              ( CLUE::Create-Fact ( q_map m1 q2 q3 ) ( ) )
              <ctx ID='ctx_132'>
                ( CLUE::Input ( q_map m1 q2 q3 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_117'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 1 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 1 ) )
              ( CLUE::Create-Fact ( quan q2 # s1w6 ) ( 1 ) )
              <ctx ID='ctx_116'>
                ( CLUE::Input ( = ( quan q2 # s3w2 ) 1 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_125'>
              ( CLUE::EVAL::LF2 ( = ( quan q3 # s3w5 ) 4 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q3 # s3w5 ) 4 ) )
              ( CLUE::Create-Fact ( quan q3 # s3w5 ) ( 4 ) )
              <ctx ID='ctx_124'>
                ( CLUE::Input ( = ( quan q3 # s3w5 ) 4 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_125'>
            ( CLUE::EVAL::LF2 ( = ( quan q3 # s3w5 ) 4 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q3 # s3w5 ) 4 ) )
            ( CLUE::Create-Fact ( quan q3 # s3w5 ) ( 4 ) )
            <ctx ID='ctx_124'>
              ( CLUE::Input ( = ( quan q3 # s3w5 ) 4 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_117'>
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 1 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 1 ) )
            ( CLUE::Create-Fact ( quan q2 # s1w6 ) ( 1 ) )
            <ctx ID='ctx_116'>
              ( CLUE::Input ( = ( quan q2 # s3w2 ) 1 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_141'>
          ( CLUE::Create-Fact ( verb m1 s1w4 ) ( ) )
          <ctx ID='ctx_139'>
            ( CLUE::Input ( verb m1 s3w3 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
</Traces>
</Unit>
