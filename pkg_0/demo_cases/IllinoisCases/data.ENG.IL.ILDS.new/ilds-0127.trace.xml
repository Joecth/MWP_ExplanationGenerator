<Unit ID="IIS-MR-MATH-GRADEXX-XXXXXX">
<Traces>
<Trace>
  <CHUNK_TREE>
      <CHUNK>V.have</CHUNK>
      <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>BeginTree</CHUNK>
        <CHUNK>18</CHUNK>
          <CHUNK>OP_Multiplication</CHUNK>
            <CHUNK>9child</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>2(candy/child)</CHUNK>
              <CHUNK>OP_CommonDiv</CHUNK>
                <CHUNK>2candy</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
                <CHUNK>1child</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          <CHUNK>UPSCOPE</CHUNK>
        <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>EndTree</CHUNK>
  </CHUNK_TREE>
  <math ID='ctx_144'>
    18
    Multiplication
    <math ID='NULL'>
      9child
    </math>
    <math ID='ctx_83'>
      2(candy/child)
      CommonDiv
      <math ID='NULL'>
        2candy
      </math>
      <math ID='NULL'>
        1child
      </math>
    </math>
  </math>
  <ctx ID='ctx_141'>
    <__one_line_xml_ASK__ANS>18</__one_line_xml_ASK__ANS>
    <ctx ID='ctx_140'>
      ( CLUE::Input ( ASK ANS ( Multiplication ( quan q3 # s2w5 ) ( Get ( u_map ?m # s2w5 # s1w5 ) ( COND ( verb ?m s1w3 ) ) ) ) ) )
    </ctx>
    <ctx ID='ctx_144'>
      ( CLUE::Util ( Multiplication 9 2 = 18 ) )
      ( CLUE::Util ( Val1 ( m_real 9 ) ( m_fact ( quan q3 # s1w2 ) ( 9 ) ) ) )
      ( CLUE::Util ( Val2 ( m_real 2 ) ( m_fact ( u_map m1 # s1w2 # s1w5 ) ( 2 ) ) ) )
      <ctx ID='ctx_133'>
        ( CLUE::EVAL::LF2 ( = ( quan q3 # s1w2 ) 9 ) )
        ( CLUE::EVAL::LF2 ( = ( quan q3 # s1w2 ) 9 ) )
        ( CLUE::Create-Fact ( quan q3 # s1w2 ) ( 9 ) )
        <ctx ID='ctx_132'>
          ( CLUE::Input ( = ( quan q3 # s2w5 ) 9 ) )
        </ctx>
      </ctx>
      <ctx ID='ctx_143'>
        ( CLUE::Bound-Facts ( u_map m1 # s1w2 # s1w5 ) ( verb m1 s1w3 ) )
        <ctx ID='ctx_83'>
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w2 # s1w5 ) ( / ( quan q2 # s1w5 ) ( quan q1 # s1w2 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w2 # s1w5 ) ( / 2 1 ) ) )
          ( CLUE::Create-Fact ( u_map m1 # s1w2 # s1w5 ) ( 2 ) )
          <ctx ID='ctx_82'>
            ( CLUE::Rule ( => ( and ( q_map ?_1 ?_2 ?_3 ) ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ( = ( u_map ?_1 ?_4 ?_5 ?_6 ?_7 ) ( / ( quan ?_3 ?_6 ?_7 ) ( quan ?_2 ?_4 ?_5 ) ) ) ) )
            ( CLUE::Bind ( ?_1 m1 ) ( ?_2 q1 ) ( ?_3 q2 ) ( ?_4 # ) ( ?_5 s1w2 ) ( ?_6 # ) ( ?_7 s1w5 ) )
            ( CLUE::Premise ( q_map m1 q1 q2 ) ( quan q1 # s1w2 ) ( quan q2 # s1w5 ) )
            ( CLUE::Conclusion ( = ( u_map m1 # s1w2 # s1w5 ) ( / ( quan q2 # s1w5 ) ( quan q1 # s1w2 ) ) ) )
            ( CLUE::ExprVarMap ( $1_u_map ) ( $2_quan 2 ) ( $3_quan 1 ) )
            <ctx ID='ctx_81'>
              ( CLUE::Create-Fact ( q_map m1 q1 q2 ) ( ) )
              <ctx ID='ctx_79'>
                ( CLUE::Input ( q_map m1 q1 q2 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_64'>
              ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w2 ) 1 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w2 ) 1 ) )
              ( CLUE::Create-Fact ( quan q1 # s1w2 ) ( 1 ) )
              <ctx ID='ctx_63'>
                ( CLUE::Input ( = ( quan q1 # s1w2 ) 1 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_72'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w5 ) 2 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w5 ) 2 ) )
              ( CLUE::Create-Fact ( quan q2 # s1w5 ) ( 2 ) )
              <ctx ID='ctx_71'>
                ( CLUE::Input ( = ( quan q2 # s1w5 ) 2 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_72'>
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w5 ) 2 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w5 ) 2 ) )
            ( CLUE::Create-Fact ( quan q2 # s1w5 ) ( 2 ) )
            <ctx ID='ctx_71'>
              ( CLUE::Input ( = ( quan q2 # s1w5 ) 2 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_64'>
            ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w2 ) 1 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w2 ) 1 ) )
            ( CLUE::Create-Fact ( quan q1 # s1w2 ) ( 1 ) )
            <ctx ID='ctx_63'>
              ( CLUE::Input ( = ( quan q1 # s1w2 ) 1 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_88'>
          ( CLUE::Create-Fact ( verb m1 s1w3 ) ( ) )
          <ctx ID='ctx_86'>
            ( CLUE::Input ( verb m1 s1w3 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
</Traces>
</Unit>
