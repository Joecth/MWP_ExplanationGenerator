<Unit ID="IIS-MR-MATH-GRADEXX-XXXXXX">
<Traces>
<Trace>
  <CHUNK_TREE>
      <CHUNK>V.hold</CHUNK>
      <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>BeginTree</CHUNK>
        <CHUNK>32</CHUNK>
          <CHUNK>OP_Multiplication</CHUNK>
            <CHUNK>4rack</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>8(cd/rack)</CHUNK>
              <CHUNK>OP_CommonDiv</CHUNK>
                <CHUNK>8cd</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
                <CHUNK>1rack</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              <CHUNK>UPSCOPE</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          <CHUNK>UPSCOPE</CHUNK>
        <CHUNK>UPSCOPE</CHUNK>
      <CHUNK>EndTree</CHUNK>
  </CHUNK_TREE>
  <math ID='ctx_164'>
    32
    Multiplication
    <math ID='NULL'>
      4rack
    </math>
    <math ID='ctx_89'>
      8(cd/rack)
      CommonDiv
      <math ID='NULL'>
        8cd
      </math>
      <math ID='NULL'>
        1rack
      </math>
    </math>
  </math>
  <ctx ID='ctx_161'>
    <__one_line_xml_ASK__ANS>32</__one_line_xml_ASK__ANS>
    <ctx ID='ctx_160'>
      ( CLUE::Input ( ASK ANS ( Multiplication ( quan q3 # s2w6 ) ( Get ( u_map ?m # s2w6 # s1w6 ) ( COND ( verb ?m s1w4 ) ) ) ) ) )
    </ctx>
    <ctx ID='ctx_164'>
      ( CLUE::Util ( Multiplication 4 8 = 32 ) )
      ( CLUE::Util ( Val1 ( m_real 4 ) ( m_fact ( quan q3 # s1w3 ) ( 4 ) ) ) )
      ( CLUE::Util ( Val2 ( m_real 8 ) ( m_fact ( u_map m1 # s1w3 # s1w6 ) ( 8 ) ) ) )
      <ctx ID='ctx_120'>
        ( CLUE::EVAL::LF2 ( = ( quan q3 # s1w3 ) 4 ) )
        ( CLUE::EVAL::LF2 ( = ( quan q3 # s1w3 ) 4 ) )
        ( CLUE::Create-Fact ( quan q3 # s1w3 ) ( 4 ) )
        <ctx ID='ctx_119'>
          ( CLUE::Input ( = ( quan q3 # s2w6 ) 4 ) )
        </ctx>
      </ctx>
      <ctx ID='ctx_163'>
        ( CLUE::Bound-Facts ( u_map m1 # s1w3 # s1w6 ) ( verb m1 s1w4 ) )
        <ctx ID='ctx_89'>
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w3 # s1w6 ) ( / ( quan q2 # s1w6 ) ( quan q1 # s1w3 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( u_map m1 # s1w3 # s1w6 ) ( / 8 1 ) ) )
          ( CLUE::Create-Fact ( u_map m1 # s1w3 # s1w6 ) ( 8 ) )
          <ctx ID='ctx_88'>
            ( CLUE::Rule ( => ( and ( q_map ?_1 ?_2 ?_3 ) ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ( = ( u_map ?_1 ?_4 ?_5 ?_6 ?_7 ) ( / ( quan ?_3 ?_6 ?_7 ) ( quan ?_2 ?_4 ?_5 ) ) ) ) )
            ( CLUE::Bind ( ?_1 m1 ) ( ?_2 q1 ) ( ?_3 q2 ) ( ?_4 # ) ( ?_5 s1w3 ) ( ?_6 # ) ( ?_7 s1w6 ) )
            ( CLUE::Premise ( q_map m1 q1 q2 ) ( quan q1 # s1w3 ) ( quan q2 # s1w6 ) )
            ( CLUE::Conclusion ( = ( u_map m1 # s1w3 # s1w6 ) ( / ( quan q2 # s1w6 ) ( quan q1 # s1w3 ) ) ) )
            ( CLUE::ExprVarMap ( $1_u_map ) ( $2_quan 8 ) ( $3_quan 1 ) )
            <ctx ID='ctx_87'>
              ( CLUE::Create-Fact ( q_map m1 q1 q2 ) ( ) )
              <ctx ID='ctx_85'>
                ( CLUE::Input ( q_map m1 q1 q2 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_70'>
              ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w3 ) 1 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w3 ) 1 ) )
              ( CLUE::Create-Fact ( quan q1 # s1w3 ) ( 1 ) )
              <ctx ID='ctx_69'>
                ( CLUE::Input ( = ( quan q1 # s1w3 ) 1 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_78'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 8 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 8 ) )
              ( CLUE::Create-Fact ( quan q2 # s1w6 ) ( 8 ) )
              <ctx ID='ctx_77'>
                ( CLUE::Input ( = ( quan q2 # s1w6 ) 8 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_78'>
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 8 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q2 # s1w6 ) 8 ) )
            ( CLUE::Create-Fact ( quan q2 # s1w6 ) ( 8 ) )
            <ctx ID='ctx_77'>
              ( CLUE::Input ( = ( quan q2 # s1w6 ) 8 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_70'>
            ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w3 ) 1 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q1 # s1w3 ) 1 ) )
            ( CLUE::Create-Fact ( quan q1 # s1w3 ) ( 1 ) )
            <ctx ID='ctx_69'>
              ( CLUE::Input ( = ( quan q1 # s1w3 ) 1 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_94'>
          ( CLUE::Create-Fact ( verb m1 s1w4 ) ( ) )
          <ctx ID='ctx_92'>
            ( CLUE::Input ( verb m1 s1w4 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
</Traces>
</Unit>
