<Traces>
<Trace>
  <CHUNK_TREE>
    <chk ID='ctx_130'>
      <CHUNK>V.分成</CHUNK>
      <CHUNK>UPSCOPE</CHUNK>
    </chk>
    <chk ID='ctx_134'>
      <CHUNK>BeginTree</CHUNK>
      <chk ID='ctx_134'>
        <CHUNK>6雙</CHUNK>
        <chk ID='ctx_134'>
          <CHUNK>OP_FloorDiv</CHUNK>
          <chk ID='ctx_134'>
            <CHUNK>13枝筷子</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          </chk>
          <chk ID='ctx_134'>
            <CHUNK>2(枝筷子/雙筷子)</CHUNK>
            <chk ID='ctx_109'>
              <CHUNK>OP_CommonDiv</CHUNK>
              <chk ID='ctx_109'>
                <CHUNK>2枝筷子</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              </chk>
              <chk ID='ctx_109'>
                <CHUNK>1雙筷子</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              </chk>
              <CHUNK>UPSCOPE</CHUNK>
            </chk>
            <CHUNK>UPSCOPE</CHUNK>
          </chk>
          <CHUNK>UPSCOPE</CHUNK>
        </chk>
        <CHUNK>UPSCOPE</CHUNK>
      </chk>
      <CHUNK>EndTree</CHUNK>
    </chk>
  </CHUNK_TREE>
  <ctx ID='ctx_131'>
    <ANS>6 雙</ANS>
    <ctx ID='ctx_130'>
      ( CLUE::Input ( ASK ANS ( FloorDiv ( quan q1 s2w2 s1w4 ) ( Get ( u_map ?m s3w4 s1w4 s2w2 s1w4 ) ( COND ( verb ?m s3w2 ) ) ) ) ( Suffix s3w4 ) ) )
    </ctx>
    <ctx ID='ctx_134'>
      ( CLUE::Util ( FloorDiv 13 2 = 6 ) )
      ( CLUE::Util ( Val1 ( m_real 13 ) ( m_fact ( quan q1 枝 s1w4 ) ( 13 ) ) ) )
      ( CLUE::Util ( Val2 ( m_real 2 ) ( m_fact ( u_map m1 雙 s1w4 枝 s1w4 ) ( 2 ) ) ) )
      <ctx ID='ctx_55'>
        ( CLUE::EVAL::LF2 ( = ( quan q1 枝 s1w4 ) 13 ) )
        ( CLUE::EVAL::LF2 ( = ( quan q1 枝 s1w4 ) 13 ) )
        ( CLUE::Create-Fact ( quan q1 枝 s1w4 ) ( 13 ) )
        <ctx ID='ctx_54'>
          ( CLUE::Input ( = ( quan q1 s1w3 s1w4 ) 13 ) )
        </ctx>
      </ctx>
      <ctx ID='ctx_133'>
        ( CLUE::Bound-Facts ( u_map m1 雙 s1w4 枝 s1w4 ) ( verb m1 s2w3 ) )
        <ctx ID='ctx_110'>
          ( CLUE::EVAL::LF2 ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / 2 1 ) ) )
          ( CLUE::Create-Fact ( u_map m1 雙 s1w4 枝 s1w4 ) ( 2 ) )
          <ctx ID='ctx_109'>
            ( CLUE::Rule ( => ( and ( q_map ?_1 ?_2 ?_3 ) ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ( = ( u_map ?_1 ?_6 ?_7 ?_4 ?_5 ) ( / ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ) ) )
            ( CLUE::Bind ( ?_1 m1 ) ( ?_2 q2 ) ( ?_3 q3 ) ( ?_4 枝 ) ( ?_5 s1w4 ) ( ?_6 雙 ) ( ?_7 s1w4 ) )
            ( CLUE::Premise ( q_map m1 q2 q3 ) ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) )
            ( CLUE::Conclusion ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) ) ) )
            ( CLUE::ExprVarMap ( $1 ) ( $2 2 ) ( $3 1 ) )
            <ctx ID='ctx_106'>
              ( CLUE::Create-Fact ( q_map m1 q2 q3 ) ( ) )
              <ctx ID='ctx_104'>
                ( CLUE::Input ( q_map m1 q2 q3 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_83'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
              ( CLUE::Create-Fact ( quan q2 枝 s1w4 ) ( 2 ) )
              <ctx ID='ctx_82'>
                ( CLUE::Input ( = ( quan q2 s2w2 s1w4 ) 2 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_94'>
              ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
              ( CLUE::Create-Fact ( quan q3 雙 s1w4 ) ( 1 ) )
              <ctx ID='ctx_93'>
                ( CLUE::Input ( = ( quan q3 s2w5 s1w4 ) 1 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_83'>
            ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
            ( CLUE::Create-Fact ( quan q2 枝 s1w4 ) ( 2 ) )
            <ctx ID='ctx_82'>
              ( CLUE::Input ( = ( quan q2 s2w2 s1w4 ) 2 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_94'>
            ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
            ( CLUE::Create-Fact ( quan q3 雙 s1w4 ) ( 1 ) )
            <ctx ID='ctx_93'>
              ( CLUE::Input ( = ( quan q3 s2w5 s1w4 ) 1 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_113'>
          ( CLUE::Create-Fact ( verb m1 s2w3 ) ( ) )
          <ctx ID='ctx_111'>
            ( CLUE::Input ( verb m1 s2w3 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
<Trace>
  <CHUNK_TREE>
    <chk ID='ctx_135'>
      <CHUNK>BeginTree</CHUNK>
      <chk ID='ctx_135'>
        <CHUNK>1枝</CHUNK>
        <chk ID='ctx_135'>
          <CHUNK>OP_Surplus</CHUNK>
          <chk ID='ctx_135'>
            <CHUNK>13枝筷子</CHUNK>
            <CHUNK>UPSCOPE</CHUNK>
          </chk>
          <chk ID='ctx_135'>
            <CHUNK>2(枝筷子/雙筷子)</CHUNK>
            <chk ID='ctx_109'>
              <CHUNK>OP_CommonDiv</CHUNK>
              <chk ID='ctx_109'>
                <CHUNK>2枝筷子</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              </chk>
              <chk ID='ctx_109'>
                <CHUNK>1雙筷子</CHUNK>
                <CHUNK>UPSCOPE</CHUNK>
              </chk>
              <CHUNK>UPSCOPE</CHUNK>
            </chk>
            <CHUNK>UPSCOPE</CHUNK>
          </chk>
          <CHUNK>UPSCOPE</CHUNK>
        </chk>
        <CHUNK>UPSCOPE</CHUNK>
      </chk>
      <CHUNK>EndTree</CHUNK>
    </chk>
  </CHUNK_TREE>
  <ctx ID='ctx_150'>
    <ANS>1 枝</ANS>
    <ctx ID='ctx_149'>
      ( CLUE::Input ( ASK ANS ( Surplus ) ( Suffix s4w3 ) ) )
    </ctx>
    <ctx ID='ctx_135'>
      ( CLUE::Util ( Surplus 13 2 = 1 ) )
      ( CLUE::Util ( Val1 ( m_real 13 ) ( m_fact ( quan q1 枝 s1w4 ) ( 13 ) ) ) )
      ( CLUE::Util ( Val2 ( m_real 2 ) ( m_fact ( u_map m1 雙 s1w4 枝 s1w4 ) ( 2 ) ) ) )
      <ctx ID='ctx_55'>
        ( CLUE::EVAL::LF2 ( = ( quan q1 枝 s1w4 ) 13 ) )
        ( CLUE::EVAL::LF2 ( = ( quan q1 枝 s1w4 ) 13 ) )
        ( CLUE::Create-Fact ( quan q1 枝 s1w4 ) ( 13 ) )
        <ctx ID='ctx_54'>
          ( CLUE::Input ( = ( quan q1 s1w3 s1w4 ) 13 ) )
        </ctx>
      </ctx>
      <ctx ID='ctx_133'>
        ( CLUE::Bound-Facts ( u_map m1 雙 s1w4 枝 s1w4 ) ( verb m1 s2w3 ) )
        <ctx ID='ctx_110'>
          ( CLUE::EVAL::LF2 ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) ) ) )
          ( CLUE::EVAL::LF2 ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / 2 1 ) ) )
          ( CLUE::Create-Fact ( u_map m1 雙 s1w4 枝 s1w4 ) ( 2 ) )
          <ctx ID='ctx_109'>
            ( CLUE::Rule ( => ( and ( q_map ?_1 ?_2 ?_3 ) ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ( = ( u_map ?_1 ?_6 ?_7 ?_4 ?_5 ) ( / ( quan ?_2 ?_4 ?_5 ) ( quan ?_3 ?_6 ?_7 ) ) ) ) )
            ( CLUE::Bind ( ?_1 m1 ) ( ?_2 q2 ) ( ?_3 q3 ) ( ?_4 枝 ) ( ?_5 s1w4 ) ( ?_6 雙 ) ( ?_7 s1w4 ) )
            ( CLUE::Premise ( q_map m1 q2 q3 ) ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) )
            ( CLUE::Conclusion ( = ( u_map m1 雙 s1w4 枝 s1w4 ) ( / ( quan q2 枝 s1w4 ) ( quan q3 雙 s1w4 ) ) ) )
            ( CLUE::ExprVarMap ( $1 ) ( $2 2 ) ( $3 1 ) )
            <ctx ID='ctx_106'>
              ( CLUE::Create-Fact ( q_map m1 q2 q3 ) ( ) )
              <ctx ID='ctx_104'>
                ( CLUE::Input ( q_map m1 q2 q3 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_83'>
              ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
              ( CLUE::Create-Fact ( quan q2 枝 s1w4 ) ( 2 ) )
              <ctx ID='ctx_82'>
                ( CLUE::Input ( = ( quan q2 s2w2 s1w4 ) 2 ) )
              </ctx>
            </ctx>
            <ctx ID='ctx_94'>
              ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
              ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
              ( CLUE::Create-Fact ( quan q3 雙 s1w4 ) ( 1 ) )
              <ctx ID='ctx_93'>
                ( CLUE::Input ( = ( quan q3 s2w5 s1w4 ) 1 ) )
              </ctx>
            </ctx>
          </ctx>
          <ctx ID='ctx_83'>
            ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q2 枝 s1w4 ) 2 ) )
            ( CLUE::Create-Fact ( quan q2 枝 s1w4 ) ( 2 ) )
            <ctx ID='ctx_82'>
              ( CLUE::Input ( = ( quan q2 s2w2 s1w4 ) 2 ) )
            </ctx>
          </ctx>
          <ctx ID='ctx_94'>
            ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
            ( CLUE::EVAL::LF2 ( = ( quan q3 雙 s1w4 ) 1 ) )
            ( CLUE::Create-Fact ( quan q3 雙 s1w4 ) ( 1 ) )
            <ctx ID='ctx_93'>
              ( CLUE::Input ( = ( quan q3 s2w5 s1w4 ) 1 ) )
            </ctx>
          </ctx>
        </ctx>
        <ctx ID='ctx_113'>
          ( CLUE::Create-Fact ( verb m1 s2w3 ) ( ) )
          <ctx ID='ctx_111'>
            ( CLUE::Input ( verb m1 s2w3 ) )
          </ctx>
        </ctx>
      </ctx>
    </ctx>
  </ctx>
</Trace>
</Traces>
